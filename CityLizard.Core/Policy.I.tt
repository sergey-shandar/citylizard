<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
namespace CityLizard.Policy
{
	public struct I:
<#
	var typeList = new Type[]
	{
		typeof(System.SByte),
	    typeof(System.Byte),
		typeof(System.Int16),
		typeof(System.UInt16),
		typeof(System.Int32),
		typeof(System.UInt32),
		typeof(System.Int64),
		typeof(System.UInt64),
        typeof(System.Decimal),
        typeof(System.Single),
        typeof(System.Double),
	};
	for(var i = 0; i < typeList.Length; ++i)
	{
		var s = "<" + typeList[i].ToString() + ">" + (i < typeList.Length - 1 ? ",": "");
#>
		INumeric<#=s#>
<#	
    }
#>
	{
		public static readonly I V = new I();
<#  
    var boList = new BinaryOperation[]
    {
        new BinaryOperation("Add", "+"),
        new BinaryOperation("Subtract", "-"),
        new BinaryOperation("Multiply", "*"),
        new BinaryOperation("Divide", "/"),
    };
    foreach(var type in typeList)
    {
        var n = type.ToString();
        var i = "INumeric<" + n + ">"; 
#>
        <#=n#> <#=i#>._0
        { 
            get { return 0; }
        }
        <#=n#> <#=i#>._1 
        {
            get { return 1; }
        }
        <#=n#> <#=i#>.MinValue
        { 
            get { return <#=n#>.MinValue; }
        }
        <#=n#> <#=i#>.MaxValue 
        {
            get { return <#=n#>.MaxValue; }
        }
<#      
        foreach(var o in boList)
        {
#>
        <#=n#> <#=i#>.<#=o.Name#>(<#=n#> a, <#=n#> b)
        {
            return (<#=n#>)(a <#=o.Operation#> b);
        }
<#
        }
    }
#>
	}
}
<#+ 
    class BinaryOperation
    {
        public readonly string Name;
        public readonly string Operation;
        public BinaryOperation(string name, string operation)
        {
            this.Name = name;
            this.Operation = operation;
        }
    }
#>