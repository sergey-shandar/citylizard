//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CityLizard.Policy {
    
    
    public partial struct Base : CityLizard.Policy.INumeric<System.Byte>, CityLizard.Policy.INumeric<System.SByte>, CityLizard.Policy.INumeric<System.UInt16>, CityLizard.Policy.INumeric<System.Int16>, CityLizard.Policy.INumeric<System.UInt32>, CityLizard.Policy.INumeric<System.Int32>, CityLizard.Policy.INumeric<System.UInt64>, CityLizard.Policy.INumeric<System.Int64>, CityLizard.Policy.INumeric<System.Decimal>, CityLizard.Policy.INumeric<System.Single>, CityLizard.Policy.INumeric<System.Double> {
        
        byte CityLizard.Policy.INumeric<System.Byte>._0() {
            return 0;
        }
        
        byte CityLizard.Policy.INumeric<System.Byte>._1() {
            return 1;
        }
        
        byte CityLizard.Policy.INumeric<System.Byte>.Add(byte a, byte b) {
            return ((byte)((a + b)));
        }
        
        byte CityLizard.Policy.INumeric<System.Byte>.Subtract(byte a, byte b) {
            return ((byte)((a - b)));
        }
        
        byte CityLizard.Policy.INumeric<System.Byte>.Multiply(byte a, byte b) {
            return ((byte)((a * b)));
        }
        
        byte CityLizard.Policy.INumeric<System.Byte>.Divide(byte a, byte b) {
            return ((byte)((a / b)));
        }
        
        sbyte CityLizard.Policy.INumeric<System.SByte>._0() {
            return 0;
        }
        
        sbyte CityLizard.Policy.INumeric<System.SByte>._1() {
            return 1;
        }
        
        sbyte CityLizard.Policy.INumeric<System.SByte>.Add(sbyte a, sbyte b) {
            return ((sbyte)((a + b)));
        }
        
        sbyte CityLizard.Policy.INumeric<System.SByte>.Subtract(sbyte a, sbyte b) {
            return ((sbyte)((a - b)));
        }
        
        sbyte CityLizard.Policy.INumeric<System.SByte>.Multiply(sbyte a, sbyte b) {
            return ((sbyte)((a * b)));
        }
        
        sbyte CityLizard.Policy.INumeric<System.SByte>.Divide(sbyte a, sbyte b) {
            return ((sbyte)((a / b)));
        }
        
        ushort CityLizard.Policy.INumeric<System.UInt16>._0() {
            return 0;
        }
        
        ushort CityLizard.Policy.INumeric<System.UInt16>._1() {
            return 1;
        }
        
        ushort CityLizard.Policy.INumeric<System.UInt16>.Add(ushort a, ushort b) {
            return ((ushort)((a + b)));
        }
        
        ushort CityLizard.Policy.INumeric<System.UInt16>.Subtract(ushort a, ushort b) {
            return ((ushort)((a - b)));
        }
        
        ushort CityLizard.Policy.INumeric<System.UInt16>.Multiply(ushort a, ushort b) {
            return ((ushort)((a * b)));
        }
        
        ushort CityLizard.Policy.INumeric<System.UInt16>.Divide(ushort a, ushort b) {
            return ((ushort)((a / b)));
        }
        
        short CityLizard.Policy.INumeric<System.Int16>._0() {
            return 0;
        }
        
        short CityLizard.Policy.INumeric<System.Int16>._1() {
            return 1;
        }
        
        short CityLizard.Policy.INumeric<System.Int16>.Add(short a, short b) {
            return ((short)((a + b)));
        }
        
        short CityLizard.Policy.INumeric<System.Int16>.Subtract(short a, short b) {
            return ((short)((a - b)));
        }
        
        short CityLizard.Policy.INumeric<System.Int16>.Multiply(short a, short b) {
            return ((short)((a * b)));
        }
        
        short CityLizard.Policy.INumeric<System.Int16>.Divide(short a, short b) {
            return ((short)((a / b)));
        }
        
        uint CityLizard.Policy.INumeric<System.UInt32>._0() {
            return 0;
        }
        
        uint CityLizard.Policy.INumeric<System.UInt32>._1() {
            return 1;
        }
        
        uint CityLizard.Policy.INumeric<System.UInt32>.Add(uint a, uint b) {
            return ((uint)((a + b)));
        }
        
        uint CityLizard.Policy.INumeric<System.UInt32>.Subtract(uint a, uint b) {
            return ((uint)((a - b)));
        }
        
        uint CityLizard.Policy.INumeric<System.UInt32>.Multiply(uint a, uint b) {
            return ((uint)((a * b)));
        }
        
        uint CityLizard.Policy.INumeric<System.UInt32>.Divide(uint a, uint b) {
            return ((uint)((a / b)));
        }
        
        int CityLizard.Policy.INumeric<System.Int32>._0() {
            return 0;
        }
        
        int CityLizard.Policy.INumeric<System.Int32>._1() {
            return 1;
        }
        
        int CityLizard.Policy.INumeric<System.Int32>.Add(int a, int b) {
            return ((int)((a + b)));
        }
        
        int CityLizard.Policy.INumeric<System.Int32>.Subtract(int a, int b) {
            return ((int)((a - b)));
        }
        
        int CityLizard.Policy.INumeric<System.Int32>.Multiply(int a, int b) {
            return ((int)((a * b)));
        }
        
        int CityLizard.Policy.INumeric<System.Int32>.Divide(int a, int b) {
            return ((int)((a / b)));
        }
        
        ulong CityLizard.Policy.INumeric<System.UInt64>._0() {
            return 0;
        }
        
        ulong CityLizard.Policy.INumeric<System.UInt64>._1() {
            return 1;
        }
        
        ulong CityLizard.Policy.INumeric<System.UInt64>.Add(ulong a, ulong b) {
            return ((ulong)((a + b)));
        }
        
        ulong CityLizard.Policy.INumeric<System.UInt64>.Subtract(ulong a, ulong b) {
            return ((ulong)((a - b)));
        }
        
        ulong CityLizard.Policy.INumeric<System.UInt64>.Multiply(ulong a, ulong b) {
            return ((ulong)((a * b)));
        }
        
        ulong CityLizard.Policy.INumeric<System.UInt64>.Divide(ulong a, ulong b) {
            return ((ulong)((a / b)));
        }
        
        long CityLizard.Policy.INumeric<System.Int64>._0() {
            return 0;
        }
        
        long CityLizard.Policy.INumeric<System.Int64>._1() {
            return 1;
        }
        
        long CityLizard.Policy.INumeric<System.Int64>.Add(long a, long b) {
            return ((long)((a + b)));
        }
        
        long CityLizard.Policy.INumeric<System.Int64>.Subtract(long a, long b) {
            return ((long)((a - b)));
        }
        
        long CityLizard.Policy.INumeric<System.Int64>.Multiply(long a, long b) {
            return ((long)((a * b)));
        }
        
        long CityLizard.Policy.INumeric<System.Int64>.Divide(long a, long b) {
            return ((long)((a / b)));
        }
        
        decimal CityLizard.Policy.INumeric<System.Decimal>._0() {
            return 0;
        }
        
        decimal CityLizard.Policy.INumeric<System.Decimal>._1() {
            return 1;
        }
        
        decimal CityLizard.Policy.INumeric<System.Decimal>.Add(decimal a, decimal b) {
            return ((decimal)((a + b)));
        }
        
        decimal CityLizard.Policy.INumeric<System.Decimal>.Subtract(decimal a, decimal b) {
            return ((decimal)((a - b)));
        }
        
        decimal CityLizard.Policy.INumeric<System.Decimal>.Multiply(decimal a, decimal b) {
            return ((decimal)((a * b)));
        }
        
        decimal CityLizard.Policy.INumeric<System.Decimal>.Divide(decimal a, decimal b) {
            return ((decimal)((a / b)));
        }
        
        float CityLizard.Policy.INumeric<System.Single>._0() {
            return 0;
        }
        
        float CityLizard.Policy.INumeric<System.Single>._1() {
            return 1;
        }
        
        float CityLizard.Policy.INumeric<System.Single>.Add(float a, float b) {
            return ((float)((a + b)));
        }
        
        float CityLizard.Policy.INumeric<System.Single>.Subtract(float a, float b) {
            return ((float)((a - b)));
        }
        
        float CityLizard.Policy.INumeric<System.Single>.Multiply(float a, float b) {
            return ((float)((a * b)));
        }
        
        float CityLizard.Policy.INumeric<System.Single>.Divide(float a, float b) {
            return ((float)((a / b)));
        }
        
        double CityLizard.Policy.INumeric<System.Double>._0() {
            return 0;
        }
        
        double CityLizard.Policy.INumeric<System.Double>._1() {
            return 1;
        }
        
        double CityLizard.Policy.INumeric<System.Double>.Add(double a, double b) {
            return ((double)((a + b)));
        }
        
        double CityLizard.Policy.INumeric<System.Double>.Subtract(double a, double b) {
            return ((double)((a - b)));
        }
        
        double CityLizard.Policy.INumeric<System.Double>.Multiply(double a, double b) {
            return ((double)((a * b)));
        }
        
        double CityLizard.Policy.INumeric<System.Double>.Divide(double a, double b) {
            return ((double)((a / b)));
        }
    }
}
